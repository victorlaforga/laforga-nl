"use strict";

var PreactRefreshPlugin = require("@prefresh/webpack");

exports.onCreateBabelConfig = function (_ref) {
  var actions = _ref.actions,
      stage = _ref.stage;

  if (stage === "develop") {
    // enable react-refresh babel plugin to enable hooks
    // @see https://github.com/JoviDeCroock/prefresh/tree/master/packages/webpack#using-hooks
    actions.setBabelPlugin({
      name: "@prefresh/babel-plugin",
      stage: stage
    });
  }
};

exports.onCreateWebpackConfig = function (_ref2) {
  var stage = _ref2.stage,
      actions = _ref2.actions,
      getConfig = _ref2.getConfig;
  var webpackPlugins = [];

  if (stage === "develop") {
    webpackPlugins.push(new PreactRefreshPlugin({
      overlay: {
        module: require.resolve("gatsby/dist/utils/fast-refresh-module")
      }
    })); // remove React refresh plugin, we want to add preact refresh instead.

    var webpackConfig = getConfig();
    webpackConfig.plugins = webpackConfig.plugins.filter(function (plugin) {
      return plugin.constructor.name !== "ReactRefreshPlugin";
    }); // add webpack-hot-middleware/client to the commons entry

    webpackConfig.entry.commons.unshift("@gatsbyjs/webpack-hot-middleware/client");
    actions.replaceWebpackConfig(webpackConfig);
  } // add preact to the framework bundle


  if (stage === "build-javascript" || stage === "develop") {
    var _webpackConfig$optimi, _webpackConfig$optimi2, _webpackConfig$optimi3, _webpackConfig$optimi4;

    var _webpackConfig = getConfig();

    if (_webpackConfig !== null && _webpackConfig !== void 0 && (_webpackConfig$optimi = _webpackConfig.optimization) !== null && _webpackConfig$optimi !== void 0 && (_webpackConfig$optimi2 = _webpackConfig$optimi.splitChunks) !== null && _webpackConfig$optimi2 !== void 0 && (_webpackConfig$optimi3 = _webpackConfig$optimi2.cacheGroups) !== null && _webpackConfig$optimi3 !== void 0 && (_webpackConfig$optimi4 = _webpackConfig$optimi3.framework) !== null && _webpackConfig$optimi4 !== void 0 && _webpackConfig$optimi4.test) {
      var frameworkRegex = _webpackConfig.optimization.splitChunks.cacheGroups.framework.test; // replace react libs with preact

      _webpackConfig.optimization.splitChunks.cacheGroups.framework.test = function (module) {
        return /(?<!node_modules.*)[\\/]node_modules[\\/](preact)[\\/]/.test(module.resource) || frameworkRegex.test(module.resource);
      };

      actions.replaceWebpackConfig(_webpackConfig);
    }
  }

  actions.setWebpackConfig({
    resolve: {
      alias: {
        react: "preact/compat",
        "react-dom": "preact/compat"
      }
    },
    plugins: webpackPlugins
  });
};